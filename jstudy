#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'
require_relative 'lib/importer'
require_relative 'models/study_session'

# Router:
class Jstudy
 include Interactions
 attr_reader :options

 def initialize
  @options = ArgumentParser.parse
  Environment.environment = @options[:environment] || "production"
 end

 def main
  database = Environment.database_connection
  if options[:command] == "search"
   search_term = ask("What do you want to search for?")
   search_words_for(search_term)
  elsif options[:command] == "searchenglish"
   search_term = ask("What do you want to search for?")
   searchenglish_words_for(search_term)
  elsif options[:command] == "add"
   error_messages = ArgumentParser.validate(options)
   if error_messages.empty?
    word = Word.new(options)
    word.save
    puts "A word with the kanji #{word.kanji}, onyomi #{word.onyomi}, kunyomi #{word.kunyomi}, the english translation '#{word.english}', JLPT level #{word.jlptlevel} and category '#{word.category}' was created."
   else
    puts error_messages
   end
  elsif options[:command] == "list"
   list_words()
  elsif options[:command] == "edit"
   if word = Word.find(options[:id])
    word.update(options)
    puts "Word #{word.id} now has the kanji #{word.kanji}, the onyomi #{word.onyomi}, the kunyomi #{word.kunyomi}, the english translation '#{word.english}', the JLPT level #{word.jlptlevel} and the category #{word.category}."
   else
    puts "Word #{options[:id]} couldn't be found."
   end
   #*************************************************************************#
   #*************************************************************************#
  elsif options[:command] == "start"
   lesson_type = start_screen_gets_lesson_type

   until(lesson_type == "v" || lesson_type == "k" || lesson_type == "q") do
    lesson_type = start_screen_gets_lesson_type
   end

   if lesson_type == "v"
    puts "let's start a vocabulary practice session, はじめましょう！"
    jlpt_level = get_jlpt_level
    start_practicing(lesson_type, jlpt_level)
   elsif lesson_type == "k"
    puts "let's start a kanji practice session, はじめましょう！"
    jlpt_level = get_jlpt_level
    start_practicing(lesson_type, jlpt_level)
   else lesson_type == "q"
    puts "See you next time, じゃまたね"
    exit
   end
   #*************************************************************************#
   #*************************************************************************#
  else
   puts "Command not implemented"
  end
 end

 def start_screen_gets_lesson_type
  puts "
     ______________________________________________________________
    | ___________________________________________________________  |
    | |   _______     ______   _______ __   __  ______  __    __ | |
    | |  |__   __|   /  ___ \\ |__  ___|| |  | | | ___ \\ \\ \\  / / | |
    | |     | |      | |   \\_|   | |   | |  | | | |  | | \\ \\/ /  | |
    | |     | |  __  |  \\___     | |   | |  | | | |  | |  \\  /   | |
    | |  _  | | |__|  \\___  \\    | |   | |  | | | |  | |   | |   | |
    | | | | | |       _   \\  |   | |   | |  | | | |  | |   | |   | |
    | | | |_| |      | |__/  |   | |   | |__| | | |__/ |   | |   | |
    | | \\_____/      \\______/    |_|   \\______/ |_____/    |_|   | |
    | |__________________________________________________________| |
    |                                                              |
    |  * * * * * * * * * * *    へようこそ   * * * * * * * * * * * |
    |______________________________________________________________|

    hit v to start a vocabulary study session, k for a kanji session
                            or hit q to quit
  "
  lesson_type = $stdin.gets.chomp
  lesson_type
 end

 def get_jlpt_level
  jlpt_level = ""
  levels = ["1", "2", "3", "4", "5"]
  until (levels.include?(jlpt_level)) do
   puts "\n\n>>Choose your JLPT level, 1 through 5\n\n"
   jlpt_level = $stdin.gets.chomp
  end
  jlpt_level
 end

 def start_practicing(lesson_type, jlpt_level)
  database = Environment.database_connection
  Importer.import("Data/data_words.csv") if Word.all.count < 3750
  Importer.skills_import("Data/data_skills.csv") if Skill.all.count < 3750
  lesson_type = set_lesson_type(lesson_type)
  if lesson_type == "Vocabulary"
   word_data = generate_random_vocab_practice_word_and_id(database, jlpt_level, lesson_type)
   new_word = show_new_word(word_data)
  else
   word_data = generate_random_kanji_practice_word_and_id(database, jlpt_level, lesson_type)
   new_word = show_new_word(word_data)
  end
 end

 def show_new_word(word_data)
  practice_word = word_data[0]
  puts "Do you know the translation of: '#{practice_word}'?"
  practice_word_id = word_data[1]
  puts practice_word_id
 end

 def generate_random_vocab_practice_word_and_id(database, jlpt_level, lesson_type)
  possible_skills = ["kunyomi", "english"]
  random_skill = possible_skills[rand(possible_skills.length)]
  puts "random vocab skill = #{random_skill}"
  level = "N#{jlpt_level}"
  skill = get_skill_for_vocab_test(random_skill)
  words_selection = get_words_selection(database, level, lesson_type, skill)
  random_id = rand(words_selection.count)
  practice_word = words_selection[random_id]
  practice_word = database.execute("select #{random_skill} from words where id = #{practice_word["id"]}")
  word_data = [practice_word[0][0], random_id]
  word_data
 end

 def generate_random_kanji_practice_word_and_id(database, jlpt_level, lesson_type)
  possible_skills = ["kanji", "onyomi", "kunyomi", "english"]
  random_skill = possible_skills[rand(possible_skills.count)]
  puts "random kanji skill = #{random_skill}"
  level = "N#{jlpt_level}"
  skill = get_skill_for_kanji_test(random_skill)
  words_selection = get_words_selection(database, level, lesson_type, skill)
  random_id = rand(words_selection.count)
  practice_word = words_selection[random_id]
  practice_word = database.execute("select #{random_skill} from words where id = #{practice_word["id"]}")
  word_data = [practice_word[0][0], random_id]
  word_data
 end

 def get_words_selection(database, level, lesson_type, skill)
  words_selection = database.execute("select * from words INNER JOIN skills ON words.id = skills.id where jlptlevel = '#{level}' AND category = '#{lesson_type}' AND #{skill} < 1")
  words_selection
 end

 def get_skill_for_vocab_test(random_vocab_skill)
  skill = "english_to_pronunciation"
  skill = "pronunciation_to_english" if random_vocab_skill == "kunyomi"
  skill
 end

 def get_skill_for_kanji_test(random_kanji_skill)
  skills = []
  if random_kanji_skill == "onyomi" || random_kanji_skill == "kunyomi"
   skills << "pronunciation_to_english"
   skills << "pronunciation_to_kanji"
  elsif random_kanji_skill == "kanji"
   skills << "kanji_to_english"
   skills << "kanji_to_pronunciation"
  else
   skills << "english_to_pronunciation"
   skills << "english_to_kanji"
  end
  skill = skills[rand(skills.count)]
  skill
 end

 def set_lesson_type(lesson_type)
  if lesson_type == "k"
   "Kanji"
  else
   "Vocabulary"
  end
 end

 def list_words()
  puts "All Words:"
  puts Word.all
 end

 def search_words_for(search_term)
  puts "You asked for: #{search_term}"
  puts Word.search(search_term)
 end

 def searchenglish_words_for(search_term)
  puts "You asked for: #{search_term}"
  puts Word.searchenglish(search_term)
 end

end
jstudy = Jstudy.new()
jstudy.main()